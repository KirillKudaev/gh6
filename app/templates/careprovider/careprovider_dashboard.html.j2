{% extends "base.html" %}

{%block title%}Care Provider Dashboard{%endblock%}

{%- block style %}
<link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/helpful.css') }}">

<script src="http://cdnjs.cloudflare.com/ajax/libs/d3/3.4.13/d3.min.js"></script>
{%- endblock %}

{%block main_content%}
    <div class="row">
      <a href="/dashboard/careprovider" class="waves-effect waves-light btn col s4  cyan darken-3">Care</a>
      <a href="/careprovider/careprovider_review" class="waves-effect waves-light btn col s4">Review</a>
      <a class="waves-effect waves-light btn col s4">Manage</a>
    </div>

  <h3>Actions</h3>
    <ul class="collection">
      <li class="collection-item"><a href="/register/homeless">Register for help</a></li>
      <li class="collection-item"><a href="/rateCareProvider">Rate Care Provider</a></li>
      <li class="collection-item"><a href="/ratings">See Care Provider Ratings</a></li>
    </ul>

    <div id="figure" class = "diagram" style="margin-bottom: 50px;"></div>
<script>

var margin = {top: 50, right: 20, bottom: 10, left: 65},
    width = 800 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var y = d3.scale.ordinal()
    .rangeRoundBands([0, height], .3);

var x = d3.scale.linear()
    .rangeRound([0, width]);

var color = d3.scale.ordinal()
    .range(["#c7001e", "#f6a580", "#cccccc", "#92c6db", "#086fad"]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("top");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")

var svg = d3.select("#figure").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .attr("id", "d3-plot")
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  color.domain(["Strongly disagree", "Disagree", "Neither agree nor disagree", "Agree", "Strongly agree"]);

  d3.csv(href="{{ url_for('static', filename='csv/raw_data.csv') }}"
, function(error, data) {

  data.forEach(function(d) {
    // calc percentages
    d["Strongly disagree"] = +d[1]*100/d.N;
    d["Disagree"] = +d[2]*100/d.N;
    d["Neither agree nor disagree"] = +d[3]*100/d.N;
    d["Agree"] = +d[4]*100/d.N;
    d["Strongly agree"] = +d[5]*100/d.N;
    var x0 = -1*(d["Neither agree nor disagree"]/2+d["Disagree"]+d["Strongly disagree"]);
    var idx = 0;
    d.boxes = color.domain().map(function(name) { return {name: name, x0: x0, x1: x0 += +d[name], N: +d.N, n: +d[idx += 1]}; });
  });

  var min_val = d3.min(data, function(d) {
          return d.boxes["0"].x0;
          });

  var max_val = d3.max(data, function(d) {
          return d.boxes["4"].x1;
          });

  x.domain([min_val, max_val]).nice();
  y.domain(data.map(function(d) { return d.Question; }));

  svg.append("g")
      .attr("class", "x axis")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)

  var vakken = svg.selectAll(".question")
      .data(data)
    .enter().append("g")
      .attr("class", "bar")
      .attr("transform", function(d) { return "translate(0," + y(d.Question) + ")"; });

  var bars = vakken.selectAll("rect")
      .data(function(d) { return d.boxes; })
    .enter().append("g").attr("class", "subbar");

  bars.append("rect")
      .attr("height", y.rangeBand())
      .attr("x", function(d) { return x(d.x0); })
      .attr("width", function(d) { return x(d.x1) - x(d.x0); })
      .style("fill", function(d) { return color(d.name); });

  bars.append("text")
      .attr("x", function(d) { return x(d.x0); })
      .attr("y", y.rangeBand()/2)
      .attr("dy", "0.5em")
      .attr("dx", "0.5em")
      .style("font" ,"10px sans-serif")
      .style("text-anchor", "begin")
      .text(function(d) { return d.n !== 0 && (d.x1-d.x0)>3 ? d.n : "" });

  vakken.insert("rect",":first-child")
      .attr("height", y.rangeBand())
      .attr("x", "1")
      .attr("width", width)
      .attr("fill-opacity", "0.5")
      .style("fill", "#F5F5F5")
      .attr("class", function(d,index) { return index%2==0 ? "even" : "uneven"; });

  svg.append("g")
      .attr("class", "y axis")
  .append("line")
      .attr("x1", x(0))
      .attr("x2", x(0))
      .attr("y2", height);

  var startp = svg.append("g").attr("class", "legendbox").attr("id", "mylegendbox");
  // this is not nice, we should calculate the bounding box and use that
  var legend_tabs = [0, 120, 200, 375, 450];
  var legend = startp.selectAll(".legend")
      .data(color.domain().slice())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(" + legend_tabs[i] + ",-45)"; });

  legend.append("rect")
      .attr("x", 0)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);

  legend.append("text")
      .attr("x", 22)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "begin")
      .style("font" ,"10px sans-serif")
      .text(function(d) { return d; });

  d3.selectAll(".axis path")
      .style("fill", "none")
      .style("stroke", "#000")
      .style("shape-rendering", "crispEdges")

  d3.selectAll(".axis line")
      .style("fill", "none")
      .style("stroke", "#000")
      .style("shape-rendering", "crispEdges")

  var movesize = width/2 - startp.node().getBBox().width/2;
  d3.selectAll(".legendbox").attr("transform", "translate(" + movesize  + ",0)");


});
</script>

  <style>
  .chart div {
    font: 10px sans-serif;
    background-color: steelblue;
    text-align: right;
    padding: 3px;
    margin: 1px;
    color: white;
  }

</style>

<div class="chart">
  <div style="width: 40px;">4</div>
  <div style="width: 80px;">8</div>
  <div style="width: 150px;">15</div>
  <div style="width: 160px;">16</div>
  <div style="width: 230px;">23</div>
  <div style="width: 420px;">42</div>
</div>

  <h3>Texts for Service</h3>

  <div class="row">
    {% for n in range(2) %}
        <div class="col s12 m3">
          <div class="card  blue-grey lighten-3">
            <div class="card-content white-text">
              <span class="card-title">(142) 163-7254</span>
              <p>Hi, here is some text.</p>
            </div>
            <div class="card-action">
              <a class="blue-text text-darken-2" href="#">Dismiss</a>
            </div>
          </div>
        </div>
    {% endfor %}
  </div>

  <h3>Dashboard</h3>

    <style type="text/css">
    .tg  {border-collapse:collapse;border-spacing:0;}
    .tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
    .tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}
    .tg .tg-yw4l{vertical-align:top}
    </style>
    <table class="tg">
      <tr>
        <strong><th class="tg-yw4l">Client ID</th></strong>
        <strong><th class="tg-yw4l">First Name</th></strong>
        <strong><th class="tg-yw4l">Last Name</th></strong>
        <strong><th class="tg-yw4l">Age</th></strong>
        <strong><th class="tg-yw4l">Gender</th></strong>
        <strong><th class="tg-yw4l">Last Visit</th></strong>
        <strong><th class="tg-yw4l">Last Update</th></strong>
      </tr>
      {% for client in clients %}
        <tr>
          <td>{{ client.id }}</td>
          <td>{{ client.firstname }}</td>
          <td>{{ client.lastname }}</td>
          <td>{{ client.age }}</td>
          <td>{{ client.gender }}</td>
          <td>{{ client.lastvisit }}</td>
          <td>{{ client.lastupdate }}</td>
        </tr>
      {% endfor %}
    </table>


  <script>
    var data = [4, 8, 15, 16, 23, 42];

    d3.select(".chart")
  .selectAll("div")
    .data(data)
  .enter().append("div")
    .style("width", function(d) { return d * 10 + "px"; })
    .text(function(d) { return d; });
  </script>  

{%endblock%}
